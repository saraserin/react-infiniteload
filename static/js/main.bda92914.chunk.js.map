{"version":3,"sources":["components/Table.tsx","api/client.js","views/Home.tsx","api/questionsApi.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","table","minWidth","HtmlTooltip","withStyles","theme","tooltip","backgroundColor","color","maxWidth","fontSize","typography","pxToRem","border","Tooltip","SimpleTable","data","onNearTableEnd","classes","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","TableBody","map","row","i","Fragment","key","question_id","interactive","placement","title","Typography","href","link","target","rel","scope","owner","display_name","length","as","onChange","inView","entry","triggerOnce","Date","creation_date","toLocaleString","instance","axios","create","baseURL","questionsApi","baseUrl","this","page","sort","axiosClient","get","then","res","items","hasMore","has_more","catch","Error","Home","useState","tableData","setTableData","hasMorePages","setHasMorePages","lastLoadedPage","setLastLoadedPage","handleLoadRows","a","getQuestions","toString","useEffect","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.bda92914.chunk.js","sourcesContent":["import React from 'react';\nimport { InView } from 'react-intersection-observer';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Tooltip,\n  Typography,\n  Theme\n} from '@material-ui/core';\n\nimport { SOQuestion } from '../api/questionsApi';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\n\nconst HtmlTooltip = withStyles((theme: Theme) => ({\n  tooltip: {\n    backgroundColor: '#f5f5f9',\n    color: 'rgba(0, 0, 0, 0.87)',\n    maxWidth: 220,\n    fontSize: theme.typography.pxToRem(12),\n    border: '1px solid #dadde9'\n  }\n}))(Tooltip);\n\nexport type SimpleTableProps = {\n  data: SOQuestion[];\n  onNearTableEnd?: () => void;\n};\n\nconst SimpleTable = ({ data, onNearTableEnd }: SimpleTableProps) => {\n  const classes = useStyles();\n  return (\n    <>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Author</TableCell>\n              <TableCell>Title</TableCell>\n              <TableCell>Created On</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data.map((row: SOQuestion, i: number) => (\n              <React.Fragment key={row.question_id}>\n                <HtmlTooltip\n                  interactive\n                  placement=\"top\"\n                  title={\n                    <React.Fragment>\n                      <Typography color=\"inherit\">{row.title}</Typography>\n                      <a\n                        href={row.link}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        Go to this question\n                      </a>\n                    </React.Fragment>\n                  }\n                >\n                  <TableRow>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {row.owner.display_name}\n                    </TableCell>\n                    <TableCell>\n                      {i === data.length - 5 && (\n                        <InView\n                          as=\"div\"\n                          onChange={\n                            onNearTableEnd\n                              ? (inView, entry) => {\n                                  if (inView) onNearTableEnd();\n                                }\n                              : () => {}\n                          }\n                          triggerOnce\n                        >\n                          <></>\n                        </InView>\n                      )}\n                      {row.title}\n                    </TableCell>\n                    <TableCell>\n                      {new Date(row.creation_date * 1000).toLocaleString()}\n                    </TableCell>\n                  </TableRow>\n                </HtmlTooltip>\n              </React.Fragment>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default SimpleTable;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.stackexchange.com/2.2/'\n});\n\nexport default instance;\n","import React, { useEffect, useState } from 'react';\nimport Table from '../components/Table';\nimport QuestionsApi, {\n  SOQuestion,\n  SOQuestionResponse\n} from '../api/questionsApi';\n\nconst questionsApi = new QuestionsApi();\n\nconst Home = () => {\n  const [tableData, setTableData] = useState<SOQuestion[]>([]);\n  //   const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [hasMorePages, setHasMorePages] = useState<boolean>(true);\n  const [lastLoadedPage, setLastLoadedPage] = useState<number>(1);\n\n  const handleLoadRows = async (): Promise<void> => {\n    if (hasMorePages) {\n      //   setIsLoading(true);\n\n      const {\n        items,\n        hasMore\n      }: SOQuestionResponse = await questionsApi.getQuestions(\n        lastLoadedPage.toString(),\n        'activity'\n      );\n      setLastLoadedPage(lastLoadedPage + 1);\n      //   setIsLoading(false);\n      setTableData([...tableData, ...items]);\n      setHasMorePages(hasMore);\n    }\n  };\n  useEffect(() => {\n    // setIsLoading(true);\n\n    questionsApi\n      .getQuestions(lastLoadedPage.toString(), 'activity')\n      .then(({ items, hasMore }) => {\n        setLastLoadedPage(lastLoadedPage + 1);\n        // setIsLoading(false);\n        setTableData([...tableData, ...items]);\n        setHasMorePages(hasMore);\n      });\n  }, []);\n\n  return (\n    <main>\n      <Table data={tableData} onNearTableEnd={handleLoadRows} />\n    </main>\n  );\n};\n\nexport default Home;\n","import axiosClient from './client';\n\nexport interface SOQuestion {\n  owner: {\n    display_name: string;\n  };\n  title: string;\n  creation_date: number;\n  link: string;\n  question_id: number;\n}\n\nexport interface SOQuestionResponse {\n  items: SOQuestion[];\n  hasMore: boolean;\n}\n\nclass QuestionsApi {\n  baseUrl: string;\n  constructor() {\n    this.baseUrl = 'questions?';\n  }\n  getQuestions(page: string, sort: string) {\n    return axiosClient\n      .get(\n        `${this.baseUrl}page=${page}&order=desc&sort=${sort}&site=stackoverflow`\n      )\n      .then((res) => {\n        const { items, has_more } = res.data;\n        return { items, hasMore: has_more };\n      })\n      .catch(() => {\n        throw new Error('API:Something went wrong');\n      });\n  }\n}\n\nexport default QuestionsApi;\n","import React from 'react';\nimport { Container } from '@material-ui/core';\nimport Home from './views/Home';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <Container maxWidth={false}>\n      <Home />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}